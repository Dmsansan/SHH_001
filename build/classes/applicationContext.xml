<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd"
       default-autowire="byName">   <!--default-lazy-init="true"    配置懒加载-->
    <!--自动扫描（实体类）注解包：实体类位置为：com.spring.mvc.entities.User,不能写成：com.spring.mvc.entities,而要写成：com.spring.mvc,packagesToScan要比实际上前一层-->
    <!--采用注解的方式注入action，service，dao  -->
    <context:component-scan base-package="com.sansan.ssh"/>
    
    <!-- location值为参数配置文件的位置 -->
    <context:property-placeholder location="classpath:db-config.properties"/>
  
    <!-- 数据库配置 -->
    <!-- 数据库连接池 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="maxPoolSize" value="${maxPoolSize}"/>
        <property name="minPoolSize" value="${minPoolSize}"/>
        <property name="autoCommitOnClose" value="${autoCommitOnClose}"/>
        <property name="checkoutTimeout" value="${checkoutTimeout}"/>
        <property name="acquireRetryAttempts" value="${acquireIncrement}"/>
    </bean>
	
    <!--  sessionFactory配置   -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
         <!--不要缺少classpath，否则在整合Struts2时候会找不到映射文件-->
  			<!-- *.hbm.xml映射在此，不需要再在hibernate.cfg.xml文件中配置 -->
        <!-- <property name="mappingResources">
            <list>
                <value>com/sansan/ssh/mapper/User.hbm.xml</value>
            </list>
        </property> -->
        
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
            </props>
        </property>
        <property name="configLocation">
            <!--mapper实例映射关系文件配置在cfg文件里-->
            <value>classpath:hibernate.cfg.xml</value>
        </property>
    </bean>
    
    
    <!--spring对hibernate的事务管理  -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>
    <aop:config proxy-target-class="true">
        
        <aop:pointcut expression=" execution(* com.sansan.ssh.service.impl.*.*(..))"
            id="serviceMethod" />
        
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethod" />
    </aop:config>
    
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        
        <tx:attributes>
            <tx:method name="*" />
        </tx:attributes>
    </tx:advice>
    
    <!-- UserBean配置spring bean命名规则	-->
    <!-- 第一种方法：Dao实现类继承HibernateDaoSupport类的配置 -->
    <bean id="userDao" class="com.sansan.ssh.daoimpl.UserDaoImpl">
       
    </bean>
    <!-- 第二种方法：在dao类中定义一个模板对象 <bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate" 
        > <property name="sessionFactory" ref="sessionFactory" ></property> </bean> 
        <bean id="userDaoImpl" class="com.dao.impl.UsersDaoImpl"> <property name="hibernateTemplate" 
        ref="hibernateTemplate"></property> </bean> -->

    <bean id="userService" class="com.sansan.ssh.service.impl.UserServiceImpl">
       
    </bean>
    
    <bean id="userAction" class="com.sansan.ssh.action.UserAction" scope="prototype">
        <property name="userService" ref="userService" />
    </bean>
    
</beans>